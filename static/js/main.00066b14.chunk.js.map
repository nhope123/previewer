{"version":3,"sources":["index.js"],"names":["Previewer","props","state","input","text","cleanText","formClass","formMax","formMin","viewClass","viewMax","viewMin","preview","textUpdate","bind","maximizeForm","minimizeForm","maximizeView","minimizeView","this","setState","event","target","value","className","href","title","rel","class","id","for","aria-hidden","tabindex","onClick","onChange","Preview","classes","vMax","vMin","maxView","minView","React","Component","output","dangerouslySetInnerHTML","__html","marked","sanitizer","DOMPurify","sanitize","breaks","gfm","xhtml","ReactDOM","render","document","getElementById"],"mappings":"yPA0DMA,G,wDACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAO,CACVC,MAAM,EAAKF,MAAMG,KACjBC,UAAW,EAAKJ,MAAMG,KACtBE,UAAW,sBACXC,QAAS,qCACTC,QAAS,kCACTC,UAAW,wBACXC,QAAS,qCACTC,QAAS,kCACTC,QAAS,cAEX,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBACpB,EAAKI,aAAe,EAAKA,aAAaJ,KAAlB,gBAjBJ,E,2DAsBhBK,KAAKC,SAAS,CACZd,UAAW,sBACXG,UAAW,wBACXF,QAAS,qCACTC,QAAS,yC,qCAKXW,KAAKC,SAAS,CACZd,UAAW,sBACXG,UAAW,wBACXF,QAAS,qCACTC,QAAS,yC,qCAKXW,KAAKC,SAAS,CACZd,UAAW,sBACXG,UAAW,yBACXC,QAAS,qCACTC,QAAS,qCACTC,QAAS,iB,qCAKXO,KAAKC,SAAS,CACZd,UAAW,sBACXG,UAAW,wBACXC,QAAS,qCACTC,QAAS,qCACTC,QAAS,iB,iCAIFS,GACTF,KAAKC,SAAS,CACZjB,MAAOkB,EAAMC,OAAOC,MACpBlB,UAAWgB,EAAMC,OAAOC,U,+BAI1B,OACE,yBAAKC,UAAU,kBAEb,yBAAKA,UAAU,mBAAf,sBACE,uBAAGC,KAAK,wCAAwCC,MAAM,cAAcJ,OAAO,SAASK,IAAI,uBACtF,uBAAGC,MAAM,uBAKb,yBAAKC,GAAG,aAEN,6BACE,0BAAMA,GAAG,OAAOL,UAAWL,KAAKjB,MAAMI,WAEpC,2BAAOuB,GAAG,QAAQC,IAAI,SAASN,UAAU,SACvC,uBAAGI,MAAM,kBAAkBG,cAAY,SADzC,gBAGE,uBAAGP,UAAWL,KAAKjB,MAAMK,QAASmB,MAAM,WAAWK,cAAY,OAAOC,SAAS,IAAIC,QAASd,KAAKJ,eACjG,uBAAGS,UAAWL,KAAKjB,MAAMM,QAASkB,MAAM,WAAWK,cAAY,OAAOC,SAAS,IAAIC,QAASd,KAAKH,gBAGnG,8BAAUO,MAAOJ,KAAKjB,MAAMC,MAAO0B,GAAG,SAASG,SAAS,IAAKE,SAAUf,KAAKN,eAGhF,6BACE,kBAACsB,EAAY,CAAC/B,KAAMe,KAAKjB,MAAMG,UACjB+B,QAASjB,KAAKjB,MAAMO,UACpB4B,KAAMlB,KAAKjB,MAAMQ,QACjB4B,KAAMnB,KAAKjB,MAAMS,QACjB4B,QAASpB,KAAKF,aACduB,QAASrB,KAAKD,aACdN,QAASO,KAAKP,iB,GAnGhB6B,IAAMC,YA8GxBP,EAAU,SAACQ,GACb,OACE,yBAAKd,GAAG,SAASL,UAAWmB,EAAOP,SAEjC,yBAAKZ,UAAU,SACb,uBAAGI,MAAM,wBAAwBG,cAAY,SAD/C,UAGE,uBAAGH,MAAOe,EAAON,KAAMX,MAAM,WAAWK,cAAY,OAAOC,SAAS,IAAIC,QAASU,EAAOJ,UACxF,uBAAGX,MAAOe,EAAOL,KAAMZ,MAAM,WAAWK,cAAY,OAAOC,SAAS,IAAMC,QAASU,EAAOH,WAG5F,yBAAKX,GAAG,UAAUL,UAAWmB,EAAO/B,QAASgC,wBAAyB,CAACC,OAAQC,IAAQH,EAAOvC,KAAK,CAC7D2C,UAAWC,IAAUC,WACrBC,QAAO,EACPC,KAAI,EACJC,OAAO,SAMrDC,IAASC,OACP,kBAACtD,EAAD,CAAWI,KAvLF,0qCAwLTmD,SAASC,eAAe,U","file":"static/js/main.00066b14.chunk.js","sourcesContent":["import React from 'react';         // React module import\nimport ReactDOM from 'react-dom';  // React DOM module import\nimport marked from 'marked';       // Marked module to display Html\nimport DOMPurify from 'dompurify'; // Sanitizer module to clean Html from attacks\nimport './index.css';              // Custom css import\n//import * as name from './change.js';\n\nconst texts = (\n`# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`);\n\n\n\n// Main componentfor the Previewer React app\nclass Previewer extends React.Component{\n  constructor(props){\n    super(props);\n    this.state= {\n      input:this.props.text,\n      cleanText: this.props.text,\n      formClass: 'form show form-size',\n      formMax: 'fa fa-window-maximize regular show',\n      formMin: 'fa-window-minimize regular hide',\n      viewClass: 'viewer show view-size',\n      viewMax: 'fa fa-window-maximize regular show',\n      viewMin: 'fa-window-minimize regular hide',\n      preview: 'minPreview'\n     };\n    this.textUpdate = this.textUpdate.bind(this);\n    this.maximizeForm = this.maximizeForm.bind(this);\n    this.minimizeForm = this.minimizeForm.bind(this);\n    this.maximizeView = this.maximizeView.bind(this);\n    this.minimizeView = this.minimizeView.bind(this);\n\n  }\n  // Maximize the editor textarea, only this area is show\n  maximizeForm(){\n    this.setState({\n      formClass: 'form show maxWindow',\n      viewClass: \"viewer hide view-size\",\n      formMax: 'fa fa-window-maximize regular hide',\n      formMin: 'fa fa-window-minimize regular show'\n      });\n    }\n    // Minimize the editor textarea, returns app view to origin\n  minimizeForm(){\n    this.setState({\n      formClass: 'form show form-size',\n      viewClass: \"viewer show view-size\",\n      formMax: 'fa fa-window-maximize regular show',\n      formMin: 'fa fa-window-minimize regular hide'\n    });\n  }\n      // Maximize the Display area, only this area is show\n  maximizeView(){\n    this.setState({\n      formClass: 'form hide form-size',\n      viewClass: 'viewer show maxPreview',\n      viewMax: 'fa fa-window-maximize regular hide',\n      viewMin: 'fa fa-window-minimize regular show',\n      preview: 'maxPreview'\n      });\n    }\n  // Minimize the display area, returns app view to origin\n  minimizeView(){\n    this.setState({\n      formClass: 'form show form-size',\n      viewClass: \"viewer show view-size\",\n      viewMax: 'fa fa-window-maximize regular show',\n      viewMin: 'fa fa-window-minimize regular hide',\n      preview: 'minPreview'\n      });\n    }\n  // Update the data in viewer on editing in the editor\n  textUpdate(event){\n    this.setState({\n      input: event.target.value,\n      cleanText: event.target.value});\n  }\n  // Render , monitor and update app Componentse\n  render(){\n    return(\n      <div className='main-container' >\n\n        <div className='title-container' > Markdown Previewer\n          <a href='https://github.com/nhope123/previewer' title='Github Code' target='_blank' rel=\"noopener noreferrer\" >\n            <i class=\"fa fa-github-alt\"></i>\n          </a>\n        </div>\n\n\n        <div id=\"container\">\n\n          <div>\n            <form id=\"form\" className={this.state.formClass} >\n              {/* Editor title bar with maximize and minimize options */}\n              <label id=\"label\" for='editor' className=\"label\">\n                <i class=\"fa fa-cogs icon\" aria-hidden=\"true\"></i>\n                Narcro Editor\n                <i className={this.state.formMax} title='Maximize' aria-hidden=\"true\" tabindex='0' onClick={this.maximizeForm}  ></i>\n                <i className={this.state.formMin} title='Minimize' aria-hidden=\"true\" tabindex='0' onClick={this.minimizeForm}  ></i>\n              </label>\n              {/* Editor text field for entering Html Markdown */}\n              <textarea value={this.state.input} id=\"editor\" tabindex=\"0\"  onChange={this.textUpdate} ></textarea>\n            </form>\n          </div>\n          <div>\n            <Preview {...{text: this.state.cleanText,\n                          classes: this.state.viewClass,\n                          vMax: this.state.viewMax,\n                          vMin: this.state.viewMin,\n                          maxView: this.maximizeView,\n                          minView: this.minimizeView,\n                          preview: this.preview\n                        }} />\n          </div>\n        </div>\n\n\n    </div>\n    );\n  }\n}\n// Display Component will Display the text as it is added to the Editor.\nconst Preview = (output)=>{\n    return(\n      <div id=\"viewer\" className={output.classes} >\n        {/* Display title bar with maximize and minimize options */}\n        <div className=\"label\">\n          <i class=\"fa fa-television icon\" aria-hidden=\"true\"></i>\n          Display\n          <i class={output.vMax} title='Maximize' aria-hidden=\"true\" tabindex='0' onClick={output.maxView}></i>\n          <i class={output.vMin} title='Minimize' aria-hidden=\"true\" tabindex='0'   onClick={output.minView}></i>\n        </div>\n        {/* Component renders the Html Mrakdown, sanitize it from bad Html and adds line breaks  */}\n        <div id=\"preview\" className={output.preview} dangerouslySetInnerHTML={{__html: marked( output.text,{\n                                              sanitizer: DOMPurify.sanitize(),\n                                              breaks:true,\n                                              gfm:true,\n                                              xhtml: false})}} ></div>\n      </div>\n    );\n}\n\n// Render all Components to the Html Page\nReactDOM.render(\n  <Previewer text={texts} />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}